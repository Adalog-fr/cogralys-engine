OPTIONAL MATCH (auie:A_TASK_TYPE_DECLARATION|A_SINGLE_TASK_DECLARATION|A_PROTECTED_TYPE_DECLARATION|A_SINGLE_PROTECTED_DECLARATION)<-[:IS_ENCLOSED_IN*]-(:AN_IDENTIFIER)-[:CORRESPONDING_NAME_DEFINITION]->()-[:IS_ENCLOSED_IN*]->(enclosingParentInterfaceTaskOrProtected:A_DECLARATION)-[:CORRESPONDING_TYPE_DECLARATION_VIEW]->(parentInterfaceTaskOrProtected:AN_INTERFACE_TYPE_DEFINITION)
call apoc.do.when(parentInterfaceTaskOrProtected is not null, 'CALL apoc.create.relationship(enclosingParentInterfaceTaskOrProtected,"IS_PROGENITOR_OF",{},enclosingE) YIELD rel AS relParentInterfaceTaskOrProtected RETURN relParentInterfaceTaskOrProtected, enclosingParentInterfaceTaskOrProtected', 'return null', {enclosingE:auie, enclosingParentInterfaceTaskOrProtected:enclosingParentInterfaceTaskOrProtected}) yield value as interfacesTaskOrProtected
RETURN *