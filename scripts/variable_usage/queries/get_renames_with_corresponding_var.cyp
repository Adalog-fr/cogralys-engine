MATCH (e:AN_OBJECT_RENAMING_DECLARATION)<-[:IS_ENCLOSED_IN { index: 3 }]-(elt)

CALL {
  // Manage AN_INDEXED_COMPONENT
  WITH e, elt
  MATCH (elt:AN_INDEXED_COMPONENT)<-[:IS_ENCLOSED_IN { index: 1 }]-(el)

  // Match index
  OPTIONAL MATCH (elt)<-[:IS_ENCLOSED_IN { index: 2 }]-(:AN_IDENTIFIER)-[:CORRESPONDING_NAME_DEFINITION]->(idx:A_DEFINING_IDENTIFIER)-[:IS_ENCLOSED_IN]->(:A_VARIABLE_DECLARATION)

  RETURN e as declaration,
  // Get the corresponding variable
         CASE
           WHEN (el:A_SELECTED_COMPONENT) THEN
         [(el)<-[:IS_ENCLOSED_IN*]-(:AN_IDENTIFIER)-[:CORRESPONDING_NAME_DEFINITION]->(id:A_DEFINING_IDENTIFIER)-[:IS_ENCLOSED_IN]->(:A_VARIABLE_DECLARATION) | id][0]
           WHEN (el:AN_IDENTIFIER) THEN
         [(el)-[:CORRESPONDING_NAME_DEFINITION]->(id:A_DEFINING_IDENTIFIER)-[:IS_ENCLOSED_IN]->(:A_VARIABLE_DECLARATION) | id][0]
           ELSE NULL
           END AS variable, idx

  UNION

  // Manage AN_IDENTIFIER
  WITH e, elt
  MATCH (elt:AN_IDENTIFIER)-[:CORRESPONDING_NAME_DEFINITION]->(id:A_DEFINING_IDENTIFIER)-[:IS_ENCLOSED_IN]->(:A_VARIABLE_DECLARATION)

  // Match index
  OPTIONAL MATCH (elt)<-[:IS_ENCLOSED_IN { index: 2 }]-(:AN_IDENTIFIER)-[:CORRESPONDING_NAME_DEFINITION]->(idx:A_DEFINING_IDENTIFIER)-[:IS_ENCLOSED_IN]->(:A_VARIABLE_DECLARATION)

  RETURN e as declaration, id AS variable, idx
}

RETURN declaration, variable, idx
